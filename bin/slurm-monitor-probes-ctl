#!/usr/bin/bash

SCRIPT_NAME=$(realpath -L $0)
SCRIPT_DIR=$(realpath -L $(dirname $0))

# This script will be called from a venv directory - when installed
BASE_DIR=$(realpath -L $SCRIPT_DIR/../../)
VENV_NAME="$BASE_DIR/venv-$(uname -p)"


LOG_DIR=/tmp/slurm-monitor-probe
PID_FILE=$LOG_DIR/pid
LOG_FILE=$LOG_DIR/main.log

DRYRUN=0

if [ ! -d $BASE_DIR ]; then
    mkdir -p $BASE_DIR
fi

if [ ! -d $LOG_DIR ]; then
    mkdir -p $LOG_DIR
fi

# Default assumes probe is triggered from the receiving node
TARGET_HOST=$(hostname)
RUNUSER=$USER
MODE=
NODELIST=

function usage() {
    echo "usage $0 [-t <target-host>] [-u <user>] [-n <nodelist>] [-d] deploy | undeploy | start-probe | stop-probe"
    echo "options:"
    echo "    -d  dry-run"
}

function process_options() {
    local OPTIND
    while getopts 't:u:n:dh' option; do
        case $option in
            t)
                TARGET_HOST=$OPTARG
                ;;
            u)
                RUNUSER=$OPTARG
                ;;
            d)
                DRYRUN=1
                ;;
            h)
                usage
                ;;
            n)
                NODELIST=$OPTARG
                ;;
            *)
                echo "Unknown option $option"
                usage
                ;;
        esac
    done
    MODE="${@:$OPTIND:1}"
}

function deploy() {
    TARGET_LOG=$LOG_DIR/deployed-probes-$(date +%Y%m%d-%H%M%S).target.log

    if [ -z "$NODELIST" ]; then
        NODELIST=`sinfo -N | cut -d' ' -f1 | tail -n +2 | uniq`
    else
        NODELIST=`echo $NODELIST | sed 's/,/\n/g' | uniq`
    fi

    for node in $NODELIST; do
        # Some site-specific excludes
        if [[ "$node" =~ ^srl-[amn] ]] || [[ "$node" =~ ^v ]]; then
            echo "Skip $node"
        else
            if [ $DRYRUN -eq 1 ]; then
                 echo "Deploying to $node -- dryrun"
                 echo "ssh ${RUNUSER}@${node} $SCRIPT_NAME -t $TARGET_HOST start-probe"
            else
                echo "Deploying to $node"
                ssh ${RUNUSER}@${node} $SCRIPT_NAME -t $TARGET_HOST start-probe
                echo $node >> $TARGET_LOG
            fi
        fi
    done
}

function stop_probe() {
    if [ -e $PID_FILE ]; then
        PID=$(< $PID_FILE)
        # check if process is still activate
        ps $PID > /dev/null
        if [ $? -eq 0 ]; then
            kill $PID
            echo "$(hostname): sent kill signal to shutdown probe, now waiting for $PID to stop "
            while [ true ]; do
                ps $PID > /dev/null
                if [ $? -eq 1 ]; then
                    break;
                fi
                echo -n "."
                sleep 5
            done
        fi
        rm $PID_FILE
        echo "$(hostname): cleanup completed"
    fi
    echo "Probe $(hostname) stopped"
}

function start_probe() {
    stop_probe

    if [ ! -d $VENV_NAME ]; then
        python3 -m venv $VENV_NAME
        . $VENV_NAME/bin/activate

        if [ -e $SCRIPT_DIR/../pyproject.toml ]; then
            pip install $SCRIPT_DIR/..
        else
            pip install $BASE_DIR/slurm-monitor
        fi
    else
        echo "Sourcing $VENV_NAME/bin/activate"
        . $VENV_NAME/bin/activate
    fi

    echo "Starting slurm-monitor probe (check $LOG_FILE)"
    if [ $DRYRUN -eq 0 ]; then
        nohup slurm-monitor probe --host $TARGET_HOST > $LOG_FILE 2>&1 &
        echo $! > $PID_FILE
    else
        echo "nohup slurm-monitor probe --host $TARGET_HOST > $LOG_FILE 2>&1 & (dryrun)"
    fi
}


function undeploy() {
    _LASTFILE=$(ls -rt $LOG_DIR/deployed-probes-* | tail -n 1)
    NODES=${1:-${_LASTFILE}}

    while [ 0 ]; do
        echo -n "Use $NODES? [Y/n]"
        read answer
        if [[ $answer =~ ^[yY] ]]; then
            break
        fi
    done

    for node in $(cat $NODES); do
        if [[ $node =~ ^# ]]; then
            echo "Skipping $node"
        else
            echo "Stopping probe on: $node";
            if [ $DRYRUN -eq 0 ]; then
                ssh $USER@${node} $SCRIPT_NAME stop-probe
            else
                echo "ssh $USER@${node} $SCRIPT_NAME stop-probe (dryrun)"
            fi
        fi
    done

    echo "Waiting for jobs"
    for job in `jobs -p`; do
        wait $job
    done
}

process_options $@

case $MODE in
    "deploy")
        deploy
        ;;
    "undeploy")
        undeploy
        ;;
    "stop-probe")
        stop_probe
        ;;
    "start-probe")
        start_probe
        ;;
    *)
        echo "Unknown mode '$MODE'"
        usage
        ;;
esac
